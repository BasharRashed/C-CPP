int add_node_to_frequency_list(MarkovNode *first_node, MarkovNode *second_node)
{
    if (first_node->frequency_list == NULL) {
        first_node->frequency_list = malloc(sizeof(MarkovNodeFrequency) * 1);
        if (first_node->frequency_list == NULL) {
            fprintf(stdout,FL_ALLOC_FAIL);
            return 1;
        }
        first_node->freq_list_size = 0;
    }

    if (is_in_freq_list(first_node,second_node)){
        MarkovNodeFrequency *list = first_node->frequency_list;
        for (int i = 0; i < first_node->freq_list_size; ++i) {
            if(strcmp(list[i].markov_node->data,second_node->data)==0){
                list[i].frequency +=1;
                return 0;
            }
        }
    }
    else {
        MarkovNodeFrequency *temp =
                realloc(first_node->frequency_list,
                        (first_node->freq_list_size + 1)
                        * sizeof(MarkovNodeFrequency));
        if (temp != NULL) {
            MarkovNode *new_markov_node = malloc(sizeof(MarkovNode));
            if (new_markov_node == NULL) {
                fprintf(stdout, ALLOCATION_ERROR_MESSAGE);
                return 1;
            }

            new_markov_node->data = second_node->data;
            new_markov_node->frequency_list = (second_node->frequency_list);
            new_markov_node->freq_list_size = 0;

            first_node->frequency_list = temp;
            first_node->frequency_list[first_node->freq_list_size].markov_node = new_markov_node;
            first_node->frequency_list[first_node->freq_list_size].frequency = 1;
            first_node->freq_list_size++;
            return 0;
        } else {
            fprintf(stdout, REALLOC_FAIL);
            return 1;
        }
    }
    return 1;
}